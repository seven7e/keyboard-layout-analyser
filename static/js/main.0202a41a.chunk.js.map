{"version":3,"sources":["components/keyboard.tsx","util/parse.ts","util/util.ts","util/predefined_layouts.ts","pages/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getEffortColour","effort","colour","KeyButton","props","percent","keyModel","width","unitWidth","style","paddingBottom","className","backgroundColor","label","KeyboardRow","_","sum","row","map","k","i","key","KeyboardLayout","rows","r","widthConfig","tab","caps","l_shift","r_shift","enter","labels","getKeyWidth","keyName","toLowerCase","getKeyLabel","toUpperCase","parse_row","split","code","shift","get2DDefault","array2d","j","defaultValue","length","efforts","widths","layouts_tmp","qwerty","layouts","Object","keys","forEach","layout","console","log","Home","useState","text","setText","textAlign","display","Layouts","marginTop","onChange","e","target","value","onTextChange","height","type","margin","onClick","keyboard","calcKeyboardMetrics","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0202a41a.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/keyboard.css';\nimport { KeyModel, KeyRowModel, KeyboardModel } from '../models/keyboard';\nimport _ from 'lodash';\n\nfunction getEffortColour(effort: number): string {\n  let colour = '#d9d9d9';\n\n  if (effort > 5.99) {\n    colour = '#993366';\n  } else if (effort > 4.99) {\n    colour = '#cc0000';\n  } else if (effort > 3.99) {\n    colour = '#ff3300'\n  } else if (effort > 2.99) {\n    colour = '#ffcc00'\n  } else if (effort > 1.99) {\n    colour = '#ccff33'\n  } else if (effort > 1.49) {\n    colour = '#99ff66'\n  } else if (effort > 0.99) {\n    colour = '#00ff00'\n  }\n\n  return colour;\n}\n\nfunction KeyButton(props: {keyModel: KeyModel, unitWidth: number}) {\n  const percent = props.keyModel.width * props.unitWidth;\n  // console.log(props.keyModel, percent);\n  \n  const style = {\n    width: `${percent}%`,\n    paddingBottom: `${props.unitWidth}%`\n  };\n\n  return (\n    <div className='keyboard-button-wrapper' style={style}>\n      <div className='keyboard-button' \n          style={{backgroundColor: getEffortColour(props.keyModel.effort)}}>\n        <div className='keyboard-button-content'>\n          {props.keyModel.label}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction KeyboardRow(props: {row: KeyRowModel}) {\n  const totalWidth = _.sum(props.row.map(k => k.width));\n  // const unitWidth = 100 / totalWidth;\n  const unitWidth = 6.8;\n\n  return (\n    <div className='keyboard-row'>\n      {props.row.map((k, i) => (\n        <KeyButton key={i} keyModel={k} unitWidth={unitWidth}></KeyButton>\n      ))}\n    </div>\n  );\n}\n\nfunction KeyboardLayout(props: {rows: KeyboardModel}) {\n  return (\n    <div className='keyboard-layout'>\n      {props.rows.map((r, i) => (\n        <KeyboardRow key={i} row={r}></KeyboardRow>\n      ))}\n    </div>\n  );\n}\n\nexport default KeyboardLayout;","import { KeyRowModel } from '../models/keyboard';\nimport { table } from 'console';\n\nconst widthConfig: {[key: string]: number} = {\n  tab: 1.5,\n  caps: 2,\n  l_shift: 2.5,\n  r_shift: 2,\n  enter: 1.5\n};\n\nconst labels: {[key: string]: string} = {\n  tab: 'Tab',\n  caps: 'Caps Lock',\n  l_shift: 'Shift',\n  r_shift: 'Shift',\n  enter: 'Enter',\n}\n\nfunction getKeyWidth(keyName: string) {\n  let width = widthConfig[keyName.toLowerCase()];\n  if (width) {\n    return width;\n  }\n\n  return 1;\n}\n\nfunction getKeyLabel(keyName: string): string {\n  let label = labels[keyName];\n  if (label) {\n    return label;\n  }\n\n  return keyName.toUpperCase();\n}\n\nexport function parse_row(row: string): KeyRowModel {\n  return row.split(/\\s+/).map(k => ({\n    code: k,\n    shift: k,\n    label: getKeyLabel(k),\n    width: getKeyWidth(k),\n    effort: 1\n  }));\n}\n\nexport function parse_layout(row_strs: Array<string>) {\n  return row_strs.map(parse_row);\n}","export function get2DDefault<T>(array2d: T[][], i: number, j: number, defaultValue: T): T {\n  if (i < array2d.length && j < array2d[i].length) {\n    return array2d[i][j];\n  }\n  return defaultValue;\n}","import { parse_layout } from './parse';\nimport { KeyboardModel } from '../models/keyboard';\nimport { get2DDefault } from './util';\n\nconst efforts = [\n  [0, 4, 2, 2, 3, 4, 5, 3, 2, 2, 4, 0, 0, 0],\n  [0, 1.5, 1, 1, 1, 3, 3, 1, 1, 1, 1.5, 0, 0],\n  [0, 4, 4, 3, 2, 5, 3, 2, 3, 4, 4, 0],\n];\n\nconst widths = [\n  [1.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n  [1.85,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.65],\n  [2.25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2.25],\n]\n\nconst qwerty = [\n  'tab q w d f k j u r l ; [ ] |',\n  'caps a s e t g y n i o h - enter',\n  'l_shift z x c v b p m , . / r_shift',\n  // 'L_Ctrl L_Alt L_Cmd Space R_Cmd R_Alt R_Ctrl'\n];\n\n\nconst layouts_tmp: {[k: string]: Array<string>} = {\n  qwerty,\n}\n\nvar layouts: {[k: string]: KeyboardModel} = {};\n\nObject.keys(layouts_tmp).forEach((k, i) => {\n  let layout = parse_layout(layouts_tmp[k])\n  layout.forEach((row, i) => {\n    row.forEach((key, j) => {\n      key.width = get2DDefault(widths, i, j, 1);\n      key.effort = get2DDefault(efforts, i, j, 0);\n    })\n  })\n\n  layouts[k] = layout;\n});\n\nconsole.log(layouts);\n\nexport default layouts;","import React, { useState } from 'react';\nimport KeyboardLayout from '../components/keyboard';\nimport { parse_layout } from '../util/parse';\nimport Layouts from '../util/predefined_layouts';\nimport { KeyboardModel } from '../models/keyboard';\n\nfunction calcKeyboardMetrics(text: string, keyboard: KeyboardModel) {\n  console.log('evaluate', text, keyboard);\n}\n\nfunction Home(props: any) {\n  const onTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    // console.log(e.target.value);\n    setText(e.target.value);\n  }\n\n  const [text, setText] = useState('');\n\n  return (\n    <div>\n      <p>Test</p>\n      {/* <div style={{display: 'flex', justifyContent: 'center', border:'2px solid'}}> */}\n      <div style={{textAlign: 'center'}}>\n        <div style={{width: '80%', display: 'inline-block'}}>\n          <KeyboardLayout rows={Layouts.qwerty}></KeyboardLayout>\n        </div>\n      </div>\n      <div style={{marginTop: '20px'}}>\n        <textarea defaultValue=\"Enter text here...\" \n          onChange={(e) => onTextChange(e)}\n          style={{width: '60%', height: '200px'}}>\n        </textarea>\n        <button type='button'\n          style={{backgroundColor: '#99ddff', margin: '10px', \n                  // marginBottom: '2px', \n                  height: '50px',\n                  width: '80px',\n                  display: 'inline-block'}}\n          onClick={() => calcKeyboardMetrics(text, Layouts.qwerty)}\n          >\n          Calculate\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Home;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n      </header> */}\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}