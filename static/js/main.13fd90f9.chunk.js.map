{"version":3,"sources":["components/keyboard.tsx","util/parse.ts","util/predefined_layouts.ts","pages/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["KeyButton","props","percent","keyModel","width","unitWidth","console","log","style","paddingBottom","className","label","KeyboardRow","_","sum","row","map","k","i","key","KeyboardLayout","rows","r","widthConfig","tab","caps","l_shift","r_shift","enter","getKeyWidth","keyName","toLowerCase","parse_row","split","layouts_tmp","qwerty","layouts","Object","keys","forEach","Home","Layouts","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mRAKA,SAASA,EAAUC,GACjB,IAAMC,EAAUD,EAAME,SAASC,MAAQH,EAAMI,UAC7CC,QAAQC,IAAIN,EAAME,SAAUD,GAE5B,IAAMM,EAAQ,CACZJ,MAAM,GAAD,OAAKF,EAAL,KACLO,cAAc,GAAD,OAAKR,EAAMI,UAAX,MAGf,OACE,yBAAKK,UAAU,0BAA0BF,MAAOA,GAC9C,yBAAKE,UAAU,mBACb,yBAAKA,UAAU,2BACZT,EAAME,SAASQ,SAO1B,SAASC,EAAYX,GACAY,IAAEC,IAAIb,EAAMc,IAAIC,KAAI,SAAAC,GAAC,OAAIA,EAAEb,UAI9C,OACE,yBAAKM,UAAU,gBACZT,EAAMc,IAAIC,KAAI,SAACC,EAAGC,GAAJ,OACb,kBAAClB,EAAD,CAAWmB,IAAKD,EAAGf,SAAUc,EAAGZ,UALpB,UAqBLe,MAVf,SAAwBnB,GACtB,OACE,yBAAKS,UAAU,mBACZT,EAAMoB,KAAKL,KAAI,SAACM,EAAGJ,GAAJ,OACd,kBAACN,EAAD,CAAaO,IAAKD,EAAGH,IAAKO,SCxC5BC,EAAuC,CAC3CC,IAAK,IACLC,KAAM,EACNC,QAAS,IACTC,QAAS,EACTC,MAAO,KAST,SAASC,EAAYC,GACnB,IAAI1B,EAAQmB,EAAYO,EAAQC,eAChC,OAAI3B,GAIG,EAGF,SAAS4B,EAAUjB,GACxB,OAAOA,EAAIkB,MAAM,OAAOjB,KAAI,SAAAC,GAAC,MAAK,CAACN,MAAOM,EAAGb,MAAOyB,EAAYZ,OCxBlE,IAQMiB,EAA4C,CAChDC,OATa,CACX,gCACA,mCACA,wCASAC,EAAwC,GAE5CC,OAAOC,KAAKJ,GAAaK,SAAQ,SAACtB,EAAGC,GACnCkB,EAAQnB,GAAkBiB,EAAYjB,GDatBD,IAAIgB,MCVtB1B,QAAQC,IAAI6B,GAEGA,QCNAI,MAZf,SAAcvC,GACZ,OACE,6BACE,mCAEA,6BACE,kBAAC,EAAD,CAAgBoB,KAAMoB,EAAQN,YCIvBO,MAVf,WACE,OACE,yBAAKhC,UAAU,OAGb,kBAAC,EAAD,QCEciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.13fd90f9.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/keyboard.css';\nimport { KeyModel, KeyRowModel, KeyboardModel } from '../models/keyboard';\nimport _ from 'lodash';\n\nfunction KeyButton(props: {keyModel: KeyModel, unitWidth: number}) {\n  const percent = props.keyModel.width * props.unitWidth;\n  console.log(props.keyModel, percent);\n  \n  const style = {\n    width: `${percent}%`,\n    paddingBottom: `${props.unitWidth}%`\n  };\n\n  return (\n    <div className='keyboard-button-wrapper' style={style}>\n      <div className='keyboard-button'>\n        <div className='keyboard-button-content'>\n          {props.keyModel.label}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction KeyboardRow(props: {row: KeyRowModel}) {\n  const totalWidth = _.sum(props.row.map(k => k.width));\n  // const unitWidth = 100 / totalWidth;\n  const unitWidth = 6.8;\n\n  return (\n    <div className='keyboard-row'>\n      {props.row.map((k, i) => (\n        <KeyButton key={i} keyModel={k} unitWidth={unitWidth}></KeyButton>\n      ))}\n    </div>\n  );\n}\n\nfunction KeyboardLayout(props: {rows: KeyboardModel}) {\n  return (\n    <div className='keyboard-layout'>\n      {props.rows.map((r, i) => (\n        <KeyboardRow key={i} row={r}></KeyboardRow>\n      ))}\n    </div>\n  );\n}\n\nexport default KeyboardLayout;","import { KeyRowModel } from '../models/keyboard';\nimport { table } from 'console';\n\nconst widthConfig: {[key: string]: number} = {\n  tab: 1.5,\n  caps: 2,\n  l_shift: 2.5,\n  r_shift: 2,\n  enter: 1.5\n};\n\nconst labels: {[key: string]: string} = {\n  tab: 'Tab',\n  caps: 'Caps Lock',\n  l_shift: 'Shift'\n}\n\nfunction getKeyWidth(keyName: string) {\n  let width = widthConfig[keyName.toLowerCase()];\n  if (width) {\n    return width;\n  }\n\n  return 1;\n}\n\nexport function parse_row(row: string): KeyRowModel {\n  return row.split(/\\s+/).map(k => ({label: k, width: getKeyWidth(k)}));\n}\n\nexport function parse_layout(row_strs: Array<string>) {\n  return row_strs.map(parse_row);\n}","import { parse_layout } from './parse';\nimport { KeyboardModel } from '../models/keyboard';\n\nconst qwerty = [\n    'Tab Q W D F K J U R L ; [ ] |',\n    'Caps A S E T G Y N I O H - Enter',\n    'L_Shift Z X C V B P M , . / R_Shift',\n    // 'L_Ctrl L_Alt L_Cmd Space R_Cmd R_Alt R_Ctrl'\n  ];\n\n\nconst layouts_tmp: {[k: string]: Array<string>} = {\n  qwerty,\n}\n\nvar layouts: {[k: string]: KeyboardModel} = {};\n\nObject.keys(layouts_tmp).forEach((k, i) => {\n  layouts[k] = parse_layout(layouts_tmp[k])\n});\n\nconsole.log(layouts);\n\nexport default layouts;","import React from 'react';\nimport KeyboardLayout from '../components/keyboard';\nimport { parse_layout } from '../util/parse';\nimport Layouts from '../util/predefined_layouts';\n\nfunction Home(props: any) {\n  return (\n    <div>\n      <p>Test</p>\n      {/* <div style={{display: 'flex', justifyContent: 'center', border:'2px solid'}}> */}\n      <div>\n        <KeyboardLayout rows={Layouts.qwerty}></KeyboardLayout>\n      </div>\n    </div>\n  )\n}\n\nexport default Home;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n      </header> */}\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}