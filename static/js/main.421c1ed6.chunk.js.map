{"version":3,"sources":["components/keyboard.tsx","util/parse.ts","util/util.ts","util/predefined_layouts.ts","util/vis.ts","pages/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["KeyButton","props","percent","keyModel","width","unitWidth","style","paddingBottom","className","backgroundColor","colour","label","KeyboardRow","_","sum","row","map","k","i","key","KeyboardLayout","rows","r","widthConfig","tab","caps","l_shift","r_shift","enter","labels","getKeyWidth","keyName","toLowerCase","getKeyLabel","toUpperCase","parseRow","split","code","shift","effort","changeKeyColour","obj","copyKey","get2DDefault","array2d","j","defaultValue","length","map2d","arr2d","func","a","e","efforts","widths","layouts_tmp","qwerty","layouts","Object","keys","forEach","layout","console","log","changeColourByEffort","kb","getEffortColour","changeColourByFreq","freq","score","c","max_score","Math","max","values","min","color1","color2","ratio","hex","x","y","toString","ceil","parseInt","substring","g","b","gradient","vis","Layouts","Home","useState","text","setText","keyboard","setKeyboard","calcKeyboardMetrics","cnt","s","countChar","new_kb","textAlign","display","marginTop","placeholder","onChange","target","value","onTextChange","height","type","margin","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.421c1ed6.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/keyboard.css';\nimport { KeyModel, KeyRowModel, KeyboardModel } from '../models/keyboard';\nimport _ from 'lodash';\n\n\n\nfunction KeyButton(props: {keyModel: KeyModel, unitWidth: number}) {\n  const percent = props.keyModel.width * props.unitWidth;\n  // console.log(props.keyModel, percent);\n  \n  const style = {\n    width: `${percent}%`,\n    paddingBottom: `${props.unitWidth}%`\n  };\n\n  return (\n    <div className='keyboard-button-wrapper' style={style}>\n      <div className='keyboard-button' \n          // style={{backgroundColor: getEffortColour(props.keyModel.effort)}}>\n          style={{backgroundColor: props.keyModel.colour}}>\n        <div className='keyboard-button-content'>\n          {props.keyModel.label}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction KeyboardRow(props: {row: KeyRowModel}) {\n  const totalWidth = _.sum(props.row.map(k => k.width));\n  // const unitWidth = 100 / totalWidth;\n  const unitWidth = 6.8;\n\n  return (\n    <div className='keyboard-row'>\n      {props.row.map((k, i) => (\n        <KeyButton key={i} keyModel={k} unitWidth={unitWidth}></KeyButton>\n      ))}\n    </div>\n  );\n}\n\nfunction KeyboardLayout(props: {rows: KeyboardModel}) {\n  return (\n    <div className='keyboard-layout'>\n      {props.rows.map((r, i) => (\n        <KeyboardRow key={i} row={r}></KeyboardRow>\n      ))}\n    </div>\n  );\n}\n\nexport default KeyboardLayout;","import { KeyModel, KeyRowModel } from '../models/keyboard';\nimport { table } from 'console';\n\nconst widthConfig: {[key: string]: number} = {\n  tab: 1.5,\n  caps: 2,\n  l_shift: 2.5,\n  r_shift: 2,\n  enter: 1.5\n};\n\nconst labels: {[key: string]: string} = {\n  tab: 'Tab',\n  caps: 'Caps Lock',\n  l_shift: 'Shift',\n  r_shift: 'Shift',\n  enter: 'Enter',\n}\n\nfunction getKeyWidth(keyName: string) {\n  let width = widthConfig[keyName.toLowerCase()];\n  if (width) {\n    return width;\n  }\n\n  return 1;\n}\n\nfunction getKeyLabel(keyName: string): string {\n  let label = labels[keyName];\n  if (label) {\n    return label;\n  }\n\n  return keyName.toUpperCase();\n}\n\nexport function parseRow(row: string): KeyRowModel {\n  return row.split(/\\s+/).map(k => ({\n    code: k,\n    shift: k,\n    label: getKeyLabel(k),\n    width: getKeyWidth(k),\n    effort: 1,\n    colour: '#ffffff'\n  }));\n}\n\nexport function parseLayout(row_strs: Array<string>) {\n  return row_strs.map(parseRow);\n}\n\nexport function copyKey(k: KeyModel): KeyModel {\n  let obj = {...k};\n  return obj;\n}\n\nexport function changeKeyColour(k: KeyModel, colour: string): KeyModel {\n  let obj = copyKey(k);\n  obj.colour = colour;\n  return obj;\n}","export function get2DDefault<T>(array2d: T[][], i: number, j: number, defaultValue: T): T {\n  if (i < array2d.length && j < array2d[i].length) {\n    return array2d[i][j];\n  }\n  return defaultValue;\n}\n\nexport function for2d<T>(arr2d: T[][], func: ((e: T, i: number, j: number) => void)): void {\n  arr2d.forEach((a, i) => {\n    a.forEach((e, j) => {\n      func(e, i, j);\n    })\n  })\n}\n\nexport function map2d<T, S>(arr2d: T[][], func: ((e: T, i: number, j: number) => S)): S[][] {\n  return arr2d.map((a, i) => (a.map((e, j) => (func(e, i, j)))));\n}\n\nexport function countChar(s: string) {\n  let cnt: {[k: string]: number} = {};\n\n  for (const c of s) {\n    if (c in cnt) {\n      cnt[c]++;\n    } else {\n      cnt[c] = 1;\n    }\n  }\n\n  return cnt;\n}","import { parseLayout } from './parse';\nimport { KeyboardModel } from '../models/keyboard';\nimport { get2DDefault } from './util';\n\nconst efforts = [\n  [0, 4, 2, 2, 3, 4, 5, 3, 2, 2, 4, 0, 0, 0],\n  [0, 1.5, 1, 1, 1, 3, 3, 1, 1, 1, 1.5, 0, 0],\n  [0, 4, 4, 3, 2, 5, 3, 2, 3, 4, 4, 0],\n];\n\nconst widths = [\n  [1.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n  [1.85,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.65],\n  [2.25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2.25],\n]\n\nconst qwerty = [\n  'tab q w d f k j u r l ; [ ] |',\n  'caps a s e t g y n i o h - enter',\n  'l_shift z x c v b p m , . / r_shift',\n  // 'L_Ctrl L_Alt L_Cmd Space R_Cmd R_Alt R_Ctrl'\n];\n\n\nconst layouts_tmp: {[k: string]: Array<string>} = {\n  qwerty,\n}\n\nvar layouts: {[k: string]: KeyboardModel} = {};\n\nObject.keys(layouts_tmp).forEach((k, i) => {\n  let layout = parseLayout(layouts_tmp[k])\n  layout.forEach((row, i) => {\n    row.forEach((key, j) => {\n      key.width = get2DDefault(widths, i, j, 1);\n      key.effort = get2DDefault(efforts, i, j, 0);\n    })\n  })\n\n  layouts[k] = layout;\n});\n\nconsole.log(layouts);\n\nexport default layouts;","import { KeyboardModel } from '../models/keyboard';\nimport { for2d, map2d } from './util';\nimport { copyKey, changeKeyColour } from './parse';\n\nfunction getEffortColour(effort: number): string {\n  let colour = '#d9d9d9';\n\n  if (effort > 5.99) {\n    colour = '#993366';\n  } else if (effort > 4.99) {\n    colour = '#cc0000';\n  } else if (effort > 3.99) {\n    colour = '#ff3300'\n  } else if (effort > 2.99) {\n    colour = '#ffcc00'\n  } else if (effort > 1.99) {\n    colour = '#ccff33'\n  } else if (effort > 1.49) {\n    colour = '#99ff66'\n  } else if (effort > 0.99) {\n    colour = '#00ff00'\n  }\n\n  return colour;\n}\n\nfunction changeColourByEffort(kb: KeyboardModel) {\n  return map2d(kb, (e, i, j) => changeKeyColour(e, getEffortColour(e.effort)));\n}\n\nfunction gradient(color1: string, color2: string, ratio: number): string {\n  let hex = function(x: number) {\n      let y = x.toString(16);\n      return (y.length == 1) ? '0' + y : y;\n  };\n\n  let r = Math.ceil(parseInt(color1.substring(0,2), 16) * ratio + parseInt(color2.substring(0,2), 16) * (1-ratio));\n  let g = Math.ceil(parseInt(color1.substring(2,4), 16) * ratio + parseInt(color2.substring(2,4), 16) * (1-ratio));\n  let b = Math.ceil(parseInt(color1.substring(4,6), 16) * ratio + parseInt(color2.substring(4,6), 16) * (1-ratio));\n\n  let middle = hex(r) + hex(g) + hex(b);\n\n  return middle\n}\n\nfunction changeColourByFreq(kb: KeyboardModel, freq: {[k: string]: number}): KeyboardModel {\n  let colour1 = 'ffffff';\n  let colour2 = 'ff0000';\n  // let colour2 = '00ff00';\n\n  // console.log('freq', freq);\n  let score: (typeof freq) = {};\n  Object.keys(freq).forEach(c => {\n    // score[c] = Math.log10(1 + freq[c]);\n    if ((c >= 'a' && c <= 'z') \n        || c == ';' || c == ',' || c == '.' || c == '/'\n        || c == '-') {\n      score[c] = freq[c];\n    }\n  });\n\n  let max_score = Math.max(...Object.values(score));\n  let min_score = Math.min(...Object.values(score));\n  min_score *= 0.8;\n  min_score = 0;\n\n  // console.log('max freq', max_freq);\n\n  if (max_score <= 0) {\n    return kb;\n  }\n\n  // console.log(score);\n\n  Object.keys(score).forEach(c => {\n    score[c] = 1 - (score[c] - min_score) / (max_score - min_score);\n  })\n\n  // console.log(score);\n\n  return map2d(kb, (k, i, j) => {\n    let f = 1;\n    let t;\n    if (k.code in score) {\n      f = score[k.code];\n      t = changeKeyColour(k, '#' + gradient(colour1, colour2, f));\n    } else {\n      t = changeKeyColour(k, '#dddddd');\n    }\n    // console.log(t, f, score[k.code]);\n    return t;\n  })\n}\n\nexport default {\n  changeColourByEffort,\n  changeColourByFreq,\n};\n","import React, { useState } from 'react';\nimport KeyboardLayout from '../components/keyboard';\nimport { parseLayout } from '../util/parse';\nimport Layouts from '../util/predefined_layouts';\nimport { KeyboardModel } from '../models/keyboard';\nimport vis from '../util/vis';\nimport { countChar } from '../util/util';\n\nlet layout = vis.changeColourByEffort(Layouts.qwerty)\n\nfunction Home(props: any) {\n  const onTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    // console.log(e.target.value);\n    setText(e.target.value);\n  }\n\n  const [text, setText] = useState('');\n  const [keyboard, setKeyboard] = useState(layout);\n\n  function calcKeyboardMetrics(text: string, keyboard: KeyboardModel) {\n    // console.log('evaluate', text, keyboard);\n    if (text.length <= 0) {\n      return;\n    }\n    // let cnt = {q: 10, w: 20};\n    let cnt = countChar(text.toLowerCase());\n    // console.log('cnt', cnt);\n    let new_kb = vis.changeColourByFreq(keyboard, cnt);\n    // console.log('new keyboard', new_kb);\n    setKeyboard(new_kb);\n  }\n\n  return (\n    <div>\n      <p>Test</p>\n      {/* <div style={{display: 'flex', justifyContent: 'center', border:'2px solid'}}> */}\n      <div style={{textAlign: 'center'}}>\n        <div style={{width: '80%', display: 'inline-block'}}>\n          <KeyboardLayout rows={keyboard}></KeyboardLayout>\n        </div>\n      </div>\n      <div style={{marginTop: '20px'}}>\n        <textarea placeholder=\"Enter text here...\" \n          onChange={(e) => onTextChange(e)}\n          style={{width: '60%', height: '200px'}}>\n        </textarea>\n        <button type='button'\n          style={{backgroundColor: '#99ddff', margin: '10px', \n                  // marginBottom: '2px', \n                  height: '50px',\n                  width: '80px',\n                  display: 'inline-block'}}\n          onClick={() => calcKeyboardMetrics(text, keyboard)}\n          >\n          Calculate\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Home;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n      </header> */}\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}